#include <wiringPi.h>
#include <iostream>
#include <chrono>
#include <thread>
using namespace std;

// ------------------- Sensor Base Class ---------------------
class Sensor {
public:
    virtual void setup() = 0;
};

// ------------------ Ultrasonic Sensor -----------------------
class UltrasonicSensor : public Sensor {
    int trig, echo;
public:
    UltrasonicSensor(int t, int e) : trig(t), echo(e) {}

    void setup() override {
        pinMode(trig, OUTPUT);
        pinMode(echo, INPUT);
    }

    float getDistance() {
        digitalWrite(trig, LOW);
        delayMicroseconds(2);
        digitalWrite(trig, HIGH);
        delayMicroseconds(10);
        digitalWrite(trig, LOW);

        while (digitalRead(echo) == LOW);
        long start = micros();
        while (digitalRead(echo) == HIGH);
        long end = micros();

        return (end - start) * 0.034 / 2;
    }
};

// -------------------- Digital Sensor -------------------------
class DigitalSensor : public Sensor {
    int pin;
public:
    DigitalSensor(int p) : pin(p) {}

    void setup() override {
        pinMode(pin, INPUT);
    }

    bool isActive() {
        return digitalRead(pin);
    }
};

// -------------------- Motor Controller -----------------------
class MotorController {
    int left1, left2, right1, right2;
public:
    MotorController(int l1, int l2, int r1, int r2)
        : left1(l1), left2(l2), right1(r1), right2(r2) {}

    void setup() {
        pinMode(left1, OUTPUT);
        pinMode(left2, OUTPUT);
        pinMode(right1, OUTPUT);
        pinMode(right2, OUTPUT);
    }

    void moveForward() {
        digitalWrite(left1, HIGH); digitalWrite(left2, LOW);
        digitalWrite(right1, HIGH); digitalWrite(right2, LOW);
    }

    void moveLeft() {
        digitalWrite(left1, LOW); digitalWrite(left2, HIGH);
        digitalWrite(right1, HIGH); digitalWrite(right2, LOW);
    }

    void moveRight() {
        digitalWrite(left1, HIGH); digitalWrite(left2, LOW);
        digitalWrite(right1, LOW); digitalWrite(right2, HIGH);
    }

    void stop() {
        digitalWrite(left1, LOW); digitalWrite(left2, LOW);
        digitalWrite(right1, LOW); digitalWrite(right2, LOW);
    }
};

// ------------------------ Robot -------------------------------
class Robot {
    UltrasonicSensor frontUS, leftUS, rightUS;
    DigitalSensor irLeft, irRight, pirLeft, pirRight;
    MotorController motors;

public:
    Robot()
        : frontUS(2, 3), leftUS(4, 17), rightUS(27, 22),
          irLeft(10), irRight(9), pirLeft(5), pirRight(6),
          motors(25, 8, 23, 24) {}

    void setup() {
        wiringPiSetupGpio();
        frontUS.setup(); leftUS.setup(); rightUS.setup();
        irLeft.setup(); irRight.setup();
        pirLeft.setup(); pirRight.setup();
        motors.setup();

        pullUpDnControl(5, PUD_DOWN); // PIR Left
        pullUpDnControl(6, PUD_DOWN); // PIR Right
    }

    void run() {
        while (true) {
            bool humanLeft = pirLeft.isActive();
            bool humanRight = pirRight.isActive();
            bool irObstacle = irLeft.isActive() || irRight.isActive();
            float frontDist = frontUS.getDistance();

            cout << "Front: " << frontDist << " cm | "
                 << "PIR(L/R): " << humanLeft << "/" << humanRight << endl;

            // Motion detection
            if (humanLeft || humanRight) {
                if (humanLeft && !humanRight) {
                    cout << "Human on LEFT" << endl;
                    motors.moveLeft();
                } else if (humanRight && !humanLeft) {
                    cout << "Human on RIGHT" << endl;
                    motors.moveRight();
                } else {
                    cout << "Human AHEAD" << endl;
                    motors.moveForward();
                }
            }
            // Obstacle check
            else if (frontDist < 20 || irObstacle) {
                cout << "Obstacle! Stopping." << endl;
                motors.stop();
            } else {
                cout << "Idle." << endl;
                motors.stop();
            }

            this_thread::sleep_for(chrono::milliseconds(300));
        }
    }
};

// ------------------- Main Program -----------------------------
int main() {
    Robot bibble;
    bibble.setup();
    bibble.run();
    return 0;
}
